Agenda:
- chapter 13 -> external storage
- Review
- Project intro ..


why sorting?
- To order things
- It makes searching easyer
- In general unsorted data is useless

When does DNMS sort data:
- user request data sorted
- bulk loading a b+ tree
- eliminate duplicates
- join alg. that use sorted data

Problem: how to sort 100gb data with 2gb ram
  - use of external storage for example.



B+ tree clustered vs unclustered:
------------------------------------------


The process of external data:
------------------------------------
input -> input buffer -> (some function) -> output buffer (ram) -> output.

  - compute f(x) for each record, write out result.
  - read a page from input to input buffer
  - write f(x) for each item to output buffer
  - When input buffer is consumed, read another page
  - When output buffer fills, write it to output

  - (read and write does not have to be coordinated.)

Use divide and conquer algorithm to break file up into smaller files
that fits into memory.


How many runs:
----------------------
if number of pages in the input is 2^k for some k then:
  - pass 0 -> 2^k sorted runs of 1 page each
  - pass 1 -> 2^k-1 -------------2 page each
  - pass 2 -> 2^k-2 -------------4 page each
  - pass k -> 1 sorted run of 2^k pages

Cost:
----------------------
Each pass:
  - read every page in file
  - process it
  - write it out
    => 2 disk I/O per page per pass

Number of passes:
------------------------
 ┌log_2(N)┐+1
 when N is the number of pages in the file

Cost of sort:
-----------------------
2N(┌log_2(N)┐+1) I/O's

In general case:
-----------------------
cost = 2 * N * (# of passes)
with B buffer pages to sort N page file, number of passes:
1 + ┌logB-1(N)┌N/B┐┐





difference between sorting in mem and on disk

how ecternal mergesort..
